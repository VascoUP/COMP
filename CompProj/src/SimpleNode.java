/* Generated By:JJTree: Do not edit this line. SimpleNode.java Version 4.3 */
/* JavaCCOptions:MULTI=false,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public class SimpleNode implements Node {

	private Node parent;
	Node[] children;
	private int id;
	private Object value;
	protected reg2auto parser;

	private String terminal;

	SimpleNode(int i) {
		id = i;
	}

	public SimpleNode(reg2auto p, int i) {
		this(i);
		parser = p;
	}

	void setTerminal(String str) {
		terminal = str;
	}

	String getTerminal() {
		return terminal;
	}

	public void jjtOpen() {
	}

	public void jjtClose() {
	}

	public void jjtSetParent(Node n) {
		parent = n;
	}

	public Node jjtGetParent() {
		return parent;
	}

	public void jjtAddChild(Node n, int i) {
		if (children == null) {
			children = new Node[i + 1];
		} else if (i >= children.length) {
			Node c[] = new Node[i + 1];
			System.arraycopy(children, 0, c, 0, children.length);
			children = c;
		}
		children[i] = n;
	}

	public Node jjtGetChild(int i) {
		return children[i];
	}

	public int jjtGetNumChildren() {
		return (children == null) ? 0 : children.length;
	}

	public int getId() {
		return id;
	}

	public void jjtSetValue(Object value) {
		this.value = value;
	}

	public Object jjtGetValue() {
		return value;
	}

	/*
	 * You can override these two methods in subclasses of SimpleNode to
	 * customize the way the node appears when the tree is dumped. If your
	 * output uses more than one line you should override toString(String),
	 * otherwise overriding toString() is probably all you need to do.
	 */

	@Override
	public String toString() {
		return reg2autoTreeConstants.jjtNodeName[id];
	}

	private String toString(String prefix) {
		return prefix + toString();
	}

	/*
	 * Override this method if you want to customize how the node dumps out its
	 * children.
	 */

	void dump(String prefix) {
		System.out.print(toString(prefix));
		if (children != null) {
			System.out.print("\n");
			for (Node aChildren : children) {
				SimpleNode n = (SimpleNode) aChildren;
				if (n != null) {
					n.dump(prefix + " ");
				}
			}
		} else if (terminal != null)
			System.out.print("  " + terminal + "\n");
		else
			System.out.print("\n");
	}
}

/*
 * JavaCC - OriginalChecksum=e5a55e38420f1b8482740698f552ed39 (do not edit this
 * line)
 */
