options
{
  	static = true;
}

PARSER_BEGIN(reg2auto)

import automata.*;

public class reg2auto { 
	public static void main(String args []) {
    	reg2auto parser = new reg2auto(System.in);
    
		try {
		  SimpleNode n = parser.Start();
		  AutomataNode startNode = GenerateENFA.enfa(n);
		  System.out.println("\n");
		  System.out.println(PrintAutomata.getString(startNode));
		  System.out.println("\n");
		  n.dump("");
		}
		catch (Exception e) {
		  System.out.println("The given regular expression is not valid\n" + e.getMessage());
		}
	}
}

PARSER_END(reg2auto)

SKIP : {
  	" "
| 	"\t"
| 	"\r"
| 	"\b"
}

TOKEN : {
  
	< BACKSLASH: "\\" >
| 	< PERIOD: "." >
| 	< CARAT: "^" >
| 	< DOLLAR_SIGN: "$" >
| 	< PIPE: "|" >
| 	< SQUARE_BRACKET_BEGIN: "[" >
| 	< SQUARE_BRACKET_END: "]" >
| 	< PARENTHESIS_BEGIN: "(" >
| 	< PARENTHESIS_END: ")" >
| 	< EXCLAMATION_POINT: "!" >
| 	< QUESTION_MARK: "?" >
| 	< ASTERISK: "*" >
| 	< PLUS: "+" >
| 	< BRACE_BEGIN: "{" >
| 	< BRACE_END: "}" >
| 	< COMMA: "," >
| 	< HYPHEN: "-" >
| 	< LETTER: ["A" - "z"] >
| 	< NUMBER: ["0" - "9"] >
|  	< TERMINATE: "\n" >
}

SimpleNode Start() : {}
{
	Expression() 
  	< TERMINATE > {
		return jjtThis;
	}
}

void Expression() : {}
{
 	ExpressionType() [PipeExpression() | Expression()]
}

void PipeExpression() : {}
{
	< PIPE > Expression()
}

void ExpressionType() : {}
{
	Terminal()			[Qualifier()]
| 	ParenthesisExp()	[Qualifier()]
| 	RangeExp() 			[Qualifier()]
}

void ParenthesisExp() : {}
{
	< PARENTHESIS_BEGIN >
		Expression()
	< PARENTHESIS_END >
}

void RangeExp() : {} 
{
	< SQUARE_BRACKET_BEGIN >
		(Range())*
	< SQUARE_BRACKET_END >
}

void Range() : {} 
{
	Terminal() (< HYPHEN > Terminal())?
}

void Qualifier() : { Token t; }
{
	( t = < QUESTION_MARK > | t = < ASTERISK > | t = < PLUS >) {
		jjtThis.setTerminal(t.image);
	}
| 	ComplexQualifier()
}

void ComplexQualifier() : {}
{
	< BRACE_BEGIN >
		CQT()
	< BRACE_END >
}

// Complex Qualifier Type
void CQT() : {}
{
	CQT2() | CQT3()
}

void CQT2() : { }
{
	< COMMA > Number()
}

void CQT3() : {}
{
	Number() (CQT4())?
}

void CQT4() : {} 
{
	< COMMA > (CQT5())?
}

void CQT5() : {}
{
	Number()
}


void Terminal() : { Token t; }
{
	T1()
| 	t = < PERIOD > {
		jjtThis.setTerminal(t.image);
	}
}

void T1() : { Token t; }
{
	Letter()
| 	Number()
}

void Letter() : { Token t; }
{
	t = < LETTER > {
		jjtThis.setTerminal(t.image);
	}
}

void Number() : { Token t; }
{
	t = < NUMBER > {
		jjtThis.setTerminal(t.image);
	}
}